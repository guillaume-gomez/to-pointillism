{"version":3,"sources":["logo.svg","Hooks/UseOpenCV.tsx","Pointillism/tools.ts","Pointillism/colorTools.ts","Pointillism/imageProcessingTool.ts","Pointillism/gradient.ts","Pointillism/pointillism.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["UseOpenCV","useState","openCVLoaded","setOpenCVLoaded","useEffect","cv","onRuntimeInitialized","generateColorPalette","image","ColorThief","getPalette","extendPalette","palette","moreSaturatedPalette","map","red","green","blue","convert","rgb","hsl","hue","saturation","lightness","x","Math","min","saturate","moreSaturated","moreHuePaletteGenerator","random","rotation","n","rotateHue","newHue","slice","getRandomIntInclusive","max","ceil","floor","mod","m","generateRandomGrid","width","height","scale","ratio","grid","i","j","y","push","shuffle","rangeOfPixels","col","row","ucharPtr","arrayDist","array1","array2","point1","point2","x1","y1","z1","x2","y2","z2","sqrt","distance","arrayMax","array","subArray","computeColorProbabilities","pixels","k","distances","maxima","summ","sum","divideArray","expArray","length","cumulativeSum","a","b","arrayVal","index","val","exp","value","colorSelect","probabilities","r","bisect_left","toGray","imageSource","grey","Mat","cols","rows","CV_8UC4","cvtColor","COLOR_RGB2GRAY","createGradient","divideByNumber","data","d","dstX","dstY","Scharr","CV_32F","BORDER_DEFAULT","dstxDiv","matFromArray","data32F","dstyDiv","delete","smooth","fieldX","fieldY","radius","iterations","s","ksize","Size","GaussianBlur","direction","atan2","floatAt","magnitude","hypot","radiansToDegrees","radians","PI","imgElement","progressCallback","console","log","src","imread","dstx","dsty","gradientSmoothingRadius","round","dstxSmooth","dstySmooth","medianBlur","zeros","batchSize","strokeScale","range","forEach","progressIndex","setTimeout","colorProbabilities","color","angle","scalar","Scalar","ellipse","Point","LINE_AA","imshow","App","ref","useRef","progress","setProgress","runAlgo","setRunAlgo","current","computePointillism","className","type","onChange","event","target","files","URL","createObjectURL","logo","alt","toFixed","id","onLoad","href","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c026b02d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import cv from \"opencv-ts\";\nimport { useEffect, useState } from 'react';\n\ninterface UseOpenCVInterface {\n  openCVLoaded : boolean;\n  cv: any;\n}\n\nfunction UseOpenCV(): UseOpenCVInterface {\n  const [openCVLoaded, setOpenCVLoaded] = useState<boolean>(false);\n  \n  useEffect(() => {\n    cv.onRuntimeInitialized = () => setOpenCVLoaded(true)\n  }, [setOpenCVLoaded]);\n\n  return { openCVLoaded, cv };\n}\n\nexport default UseOpenCV;\n","import { Mat } from \"opencv-ts\";\nimport ColorThief from 'colorthief';\nimport convert from \"color-convert\";\nimport { shuffle, max, sum } from \"lodash\";\n\nimport { saturate, rotateHue } from \"./colorTools\";\n\nimport { bisect_left } from \"aureooms-js-bisect\";\n\nconst PALETTE_BASE_COLOR = 20;\ntype point = [number, number, number];\n\nexport function generateColorPalette(image: HTMLImageElement) : point[] {\n  let colorThief = new ColorThief();\n  return colorThief.getPalette(image, PALETTE_BASE_COLOR);\n}\n\nexport function extendPalette(palette: point[]) : point[] {\n  const moreSaturatedPalette = palette.map(([red, green, blue]) => {\n    const [hue, saturation, lightness] = convert.rgb.hsl(red, green, blue);\n    const [_, moreSaturated, __] = saturate([hue, saturation, lightness], 20);\n    return convert.hsl.rgb([hue, moreSaturated, lightness]);\n  });\n\n  function moreHuePaletteGenerator() {\n    return palette.map(([red, green, blue]) => {\n      const random = Math.random() * (20 - -20) + -20;\n      \n      const [hue, saturation, lightness] = convert.rgb.hsl(red, green, blue);\n      const [newHue, _, __] = rotateHue([hue, saturation, lightness], random);\n      return convert.hsl.rgb([newHue, saturation, lightness]);\n    });\n  }\n  return [...palette.slice(0), ...moreSaturatedPalette, ...moreHuePaletteGenerator(), ...moreHuePaletteGenerator()];\n}\n\nexport function drawPalette(canvasId: string, palette: point[]) : void {\n  let canvas = document.getElementById(canvasId) as HTMLCanvasElement;\n  if (!canvas.getContext) {\n    throw \"cannot find canvas to draw palette\";\n  }\n  let context = canvas.getContext('2d') as CanvasRenderingContext2D;\n\n  const nbBaseColor = PALETTE_BASE_COLOR;\n  \n  const widthColor = canvas.width / nbBaseColor;\n  const heightColor = widthColor;\n\n  const yMax = palette.length / nbBaseColor;\n\n  for(let y = 0; y < yMax; ++y) {\n    for(let x = 0; x < nbBaseColor; ++x) {\n      const [red, green, blue] = palette[x + y * nbBaseColor];\n      context.fillStyle = `rgb(${red}, ${green}, ${blue})`;\n      context.fillRect(widthColor * x, heightColor * y, widthColor, heightColor);\n    }\n  }\n}\n\nfunction getRandomIntInclusive(min: number, max: number) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min +1)) + min;\n}\n\n// https://web.archive.org/web/20090717035140if_/javascript.about.com/od/problemsolving/a/modulobug.htm\nfunction mod(n : number, m: number) : number {\n  return ((n % m) + m) % m;\n}\n\nexport function generateRandomGrid(width: number, height: number, scale: number = 3) {\n  const ratio = (scale / 2) >> 0;\n  let grid : Array<any> = [];\n\n  for(let i = 0; i < height; i = i + scale) {\n    for(let j = 0; j < width; j = j + scale) {\n      const y = getRandomIntInclusive(-ratio, ratio) + i;\n      const x = getRandomIntInclusive(-ratio, ratio) + j;\n\n      grid.push([mod(y, height), mod(x, width)])\n    }\n  }\n  return shuffle(grid);\n}\n\nexport function rangeOfPixels(image: Mat, grid: Array<[number, number]>, min: number, max: number ) : point[] {\n  return grid.slice(min, max).map(([col, row]) => image.ucharPtr(col, row) as point)\n}\n\n\n\nfunction distance([x1, y1, z1]: point, [x2, y2, z2]: point): number {\n  return Math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2 + (z1 - z2) ** 2);\n}\n\nfunction arrayDist(array1: point[], array2: point[]) : number[][] {\n  return array1.map( (point1) =>\n    array2.map( (point2) => \n      distance(point1, point2)\n    )\n  );\n}\n\n/*\nconst coords : point[] = [ [35.0456, -85.2672, 0], [35.1174, -89.9711, 0], [35.9728, -83.9422, 0], [36.1667, -86.7833, 0]];\n\nconsole.log(arrayDist(coords, coords))*/\n\nfunction arrayMax(array: number[][]) : number[] {\n  return array.map((subArray) => max(subArray) as number);\n}\n\n\nexport function computeColorProbabilities(pixels: point[], palette: point[], k=9) : number[][] {\n  let distances = arrayDist(pixels, palette);\n  const maxima = arrayMax(distances);\n\n  distances = subArray(maxima, distances);\n  let summ = distances.map(row => sum(row));\n  distances = divideArray(summ, distances);\n\n  distances = expArray(k*palette.length, distances);\n  summ = distances.map(row => sum(row));\n  distances = divideArray(summ, distances);\n\n  return cumulativeSum(distances);\n}\n\n\nfunction subArray(a: number[], b: number[][]) : number[][] {\n  return b.map((arrayVal, index) => \n    arrayVal.map(val =>\n      (a[index] - val)\n    )\n  );\n}\n\nfunction divideArray(a: number[], b: number[][]) : number[][] {\n  return b.map((arrayVal, index) => \n    arrayVal.map(val =>\n      ( val / a[index])\n    )\n  );\n}\n\nfunction expArray(a: number, b: number[][]) : number[][] {\n  return b.map((arrayVal) => \n    arrayVal.map(val =>\n       Math.exp(val * a)\n    )\n  );\n}\n\nfunction cumulativeSum(array: number[][]) : number[][] {\n  const cumulativeSumOP = ((sum: number) => (value:number) => sum += value);\n  return array.map(row =>\n     row.map(cumulativeSumOP(0))\n  );\n}\n/*console.log(cumulativeSum([[1, 2, 3], [4, 5, 6]])) */\n\nexport function colorSelect(probabilities : number[], palette : point[]): point {\n  const r = Math.random();\n  const index : number = bisect_left(probabilities, r);\n\n  if(index < palette.length) {\n    return palette[index];\n  } else {\n    return palette[palette.length - 1];\n  }\n}","type colorType = [number, number, number];\n\n\nexport function saturate([hue, saturation, lightness]: colorType, x: number) : colorType {\n  return [hue, Math.min(100, saturation + x), lightness];\n}\n\n\nexport function desaturate([hue, saturation, lightness]: colorType, x: number) : colorType {\n  return [hue, Math.max(0, saturation - x), lightness];\n}\n\n\nexport function lighten([hue, saturation, lightness]: colorType, x: number) : colorType {\n  return [hue, saturation, Math.min(100, lightness + x)];\n}\n\n\nexport function darken([hue, saturation, lightness]: colorType, x: number) : colorType {\n  return [hue, saturation, Math.max(0, lightness - x)];\n}\n\nexport function rotateHue([hue, saturation, lightness]: colorType, rotation: number) : colorType {\n  const modulo = (x: number, n: number) : number => (x % n + n) % n;\n  const newHue = modulo(hue + rotation, 360);\n  return [newHue, saturation, lightness];\n}","import cv, { Mat, Size } from \"opencv-ts\";\n\nexport function resize(image: Mat, width: number, height: number) : Mat {\n  const newImage: Mat = new cv.Mat(image.cols, image.rows, cv.CV_8UC4);\n  cv.resize(image, newImage, new cv.Size(width, height), 0, 0, cv.INTER_AREA);\n  return newImage;\n}\n\nexport function resizeWithRatio(image: Mat, maxWidth: number, maxHeight: number) : Mat {\n  if (maxWidth === 0) {\n    throw new Error(\"resize : maxWidth is equal to zero. Please fill a value > 0\");\n  }\n\n  if (maxHeight === 0) {\n    throw new Error(\"resize : maxHeight is equal to zero. Please fill a value > 0\");\n  }\n\n  const ratio = Math.min(1.0, maxWidth / image.cols, maxHeight / image.rows);\n\n  if(ratio !== 1.0) {\n    const size : Size = new cv.Size(image.cols * ratio, image.rows * ratio);\n    let dst = new cv.Mat();\n    cv.resize(image, dst, size, 0, 0, cv.INTER_AREA);\n    return dst;\n  }\n\n  return image\n}\n\nexport function toGray(imageSource: Mat) : Mat {\n  let grey: Mat = new cv.Mat(imageSource.cols, imageSource.rows, cv.CV_8UC4);\n  cv.cvtColor(imageSource, grey, cv.COLOR_RGB2GRAY)\n  return grey;\n}\n\n","import cv, { Mat } from \"opencv-ts\";\n\nexport function createGradient(grey: Mat) : [Mat, Mat] {\n  function divideByNumber(data: number[], x: number) : number[] {\n    return data.map(d => d/x);\n  }\n\n  let dstX = new cv.Mat();\n  let dstY = new cv.Mat();\n  cv.Scharr(grey, dstX, cv.CV_32F, 1, 0, 1, 0, cv.BORDER_DEFAULT);\n  cv.Scharr(grey, dstY, cv.CV_32F, 0, 1, 1, 0, cv.BORDER_DEFAULT);\n\n  const dstxDiv = cv.matFromArray(dstX.rows, dstX.cols, cv.CV_32F, divideByNumber(dstX.data32F, 15.36));\n  const dstyDiv = cv.matFromArray(dstY.rows, dstY.cols, cv.CV_32F, divideByNumber(dstY.data32F, 15.36));\n  dstX.delete();\n  dstY.delete();\n  return [dstxDiv, dstyDiv];\n  \n  //return [dstX, dstY]\n}\n\nexport function smooth(fieldX: Mat, fieldY: Mat, radius: number, iterations: number = 1) : [Mat, Mat] {\n  const s = 2 * radius + 1;\n  const ksize = new cv.Size(s, s);\n  \n  let dstX = new cv.Mat();\n  let dstY = new cv.Mat();\n  for(let i = 0; i < iterations; ++i) {\n    cv.GaussianBlur(fieldX, dstX, ksize, 0, 0, cv.BORDER_DEFAULT);\n    cv.GaussianBlur(fieldY, dstY, ksize, 0, 0, cv.BORDER_DEFAULT);\n  }\n  return [dstX, dstY];\n}\n\nexport function direction(fieldX: Mat, fieldY: Mat, i: number, j: number) : number {\n  return Math.atan2(fieldY.floatAt(i, j), fieldX.floatAt(i, j));\n}\n\nexport function magnitude(fieldX: Mat, fieldY: Mat, i: number, j: number) : number {\n  return Math.hypot(fieldX.floatAt(i, j), fieldY.floatAt(i, j));\n}\n","import { Mat } from \"opencv-ts\";\nimport { range } from \"lodash\";\n \nimport { colorSelect, rangeOfPixels, generateColorPalette, drawPalette, extendPalette, generateRandomGrid, computeColorProbabilities } from \"./tools\";\nimport { toGray, resizeWithRatio } from \"./imageProcessingTool\";\nimport { createGradient, smooth, direction, magnitude } from \"./gradient\";\n\n\nfunction radiansToDegrees(radians: number) : number\n{\n  const pi = Math.PI;\n  return radians * (180/pi);\n}\n\nexport async function computePointillism(cv: any, imgElement: HTMLImageElement, progressCallback: (progress: number) => void) {\n  console.log(\"read image\")\n  const src = cv.imread(imgElement);\n  // algorithm used for final example\n  console.log(\"generate palette\")\n  let palette = generateColorPalette(imgElement);\n      palette = extendPalette(palette);\n\n  // optionnal not related to algorithm\n  //drawPalette(\"palette-preview\", palette);\n\n  console.log(\"convert to grey\")\n  //convert to grayscale\n  let grey: Mat = toGray(src);\n  //cv.imshow('canvasOutput', grey);\n\n  console.log(\"create gradient\")\n  const[dstx, dsty] = createGradient(grey);\n  //cv.imshow('canvasOutputX', dstx);\n  //cv.imshow('canvasOutputY', dsty);\n\n  console.log(\"create smooth gradiant\")\n  const gradientSmoothingRadius = Math.round(Math.max(src.rows, src.cols) / 50);\n  const[dstxSmooth, dstySmooth] = smooth(dstx, dsty, gradientSmoothingRadius);\n  //cv.imshow('canvasOutputXSmooth', dstxSmooth);\n  //cv.imshow('canvasOutputYSmooth', dstySmooth);\n\n  console.log(\"generate blur image\")\n  let medianBlur = cv.Mat.zeros(src.cols, src.rows, cv.CV_32F);\n  cv.medianBlur(src, medianBlur, 11);\n  //cv.imshow('medianBlur', medianBlur);\n\n  console.log(\"generate random grid\")\n  const grid = generateRandomGrid(src.cols, src.rows);\n  const batchSize = 1000;\n  const strokeScale = Math.floor(Math.max(src.rows, src.cols) / 1000);\n\n  console.log(\"begin draw\")\n  range(0, grid.length, batchSize).forEach(progressIndex => {\n    setTimeout(() => {\n      console.log(\"progress\")\n        progressCallback( (progressIndex/grid.length) * 100)\n    });\n\n    const pixels = rangeOfPixels(src, grid, progressIndex, progressIndex + batchSize);\n    const colorProbabilities = computeColorProbabilities(pixels, palette);\n    grid.slice(progressIndex, Math.min((progressIndex + batchSize), grid.length)).forEach(([y, x], index) => {\n      const color = colorSelect(colorProbabilities[index], palette);\n      const angle = radiansToDegrees(direction(dstxSmooth, dstySmooth, y, x)) + 90;\n      const length = Math.round(strokeScale + strokeScale * Math.sqrt(magnitude(dstxSmooth, dstySmooth, y, x)));\n      const scalar = new cv.Scalar(color[0], color[1], color[2], 255);\n      cv.ellipse(medianBlur, new cv.Point(x, y), new cv.Size(length, strokeScale), angle, 0, 360, scalar, -1, cv.LINE_AA);\n    });\n  });\n  console.log(\"finish\")\n  //progressElement.style.display = \"none\";\n\n  cv.imshow('medianBlur',medianBlur);\n\n  // clean up\n  medianBlur.delete();\n\n  dstxSmooth.delete();\n  dstySmooth.delete();\n\n  dstx.delete();\n  dsty.delete();\n\n  grey.delete();\n\n  src.delete();\n}\n","import React, { useEffect, useRef, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport UseOpenCV from \"./Hooks/UseOpenCV\";\nimport { computePointillism } from \"./Pointillism/pointillism\";\n\nfunction App() {\n  const { cv, openCVLoaded } = UseOpenCV();\n  const ref = useRef<HTMLImageElement>(null);\n  const [progress, setProgress] = useState<number>(0);\n  const [runAlgo, setRunAlgo] = useState<boolean>(false);\n\n  useEffect(() => {\n    if(runAlgo && ref.current) {\n      computePointillism(cv, ref.current, progressCallback);\n    }\n  }, [cv, runAlgo])\n\n\n  function loadImage(event: React.ChangeEvent<HTMLInputElement>) {\n    if(event && event.target && event.target.files && ref.current) {\n      ref.current.src = URL.createObjectURL(event.target.files[0]);\n      setRunAlgo(false);\n      setProgress(0);\n    }\n  }\n\n  function progressCallback(progress: number) {\n    setProgress(progress);\n  }\n\n  function onLoadImage(event: React.ChangeEvent<HTMLImageElement>) {\n    setRunAlgo(true);\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        { openCVLoaded ? \n          <input type=\"file\" onChange={loadImage} /> :\n          null\n        }\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>{`${progress.toFixed(2)} %`}</p>\n        <img id=\"imageSrc\" alt=\"No Image\" ref={ref} onLoad={onLoadImage} />\n        <canvas id=\"medianBlur\"></canvas>\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}